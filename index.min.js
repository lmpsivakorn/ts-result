// deno-fmt-ignore-file
// deno-lint-ignore-file
// This code was bundled using `deno bundle` and it's not recommended to edit it manually

class Result {
    constructor(_value, _error){
        this._value = _value;
        this._error = _error;
    }
    static ok(value) {
        return new Result(value, undefined);
    }
    static fail(error) {
        if (typeof error === 'string') return new Result(undefined, new Error(error));
        return new Result(undefined, error);
    }
    map(onFulfilled) {
        if (typeof this._error === 'undefined') {
            try {
                if (typeof this._value !== 'undefined') {
                    const newValue = onFulfilled(this._value);
                    return new Result(newValue, this._error);
                }
            } catch (error) {
                return new Result(undefined, error);
            }
        }
        return this;
    }
    catch(onRejected) {
        if (typeof this._error !== 'undefined') {
            try {
                const newValue = onRejected(this._error);
                return new Result(newValue, this._error);
            } catch (error) {
                return new Result(undefined, error);
            }
        }
        return this;
    }
    unwrap() {
        if (typeof this._value !== 'undefined') return this._value;
        if (typeof this._error !== 'undefined') throw new Error('value is undefined');
        throw this._error;
    }
    wrap() {
        return {
            ok: this._value,
            fail: this._error
        };
    }
    toString() {
        return JSON.stringify(this, undefined, 2).replace('_error', 'fail').replace('_value', 'ok');
    }
    _value;
    _error;
}
export { Result as default };
